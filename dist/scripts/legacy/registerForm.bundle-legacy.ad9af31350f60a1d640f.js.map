{"version":3,"file":"registerForm.bundle-legacy.ad9af31350f60a1d640f.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCwD;AACN;AACV;;AAExC;EAAA;AAAA;;AACA;EAAA;AAAA;;AACA;EAAA;AAAA;;AACA;EAAA;AAAA;;AACA;EAAA;AAAA;;AACA;EAAA;AAAA;;AACA;EAAA;AAAA;;AACA;EAAA;AAAA;;AACA;EAAA;AAAA;;AACA;EAAA;AAAA;;AACA;EAAA;AAAA,GAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA,+DAAe;EACfA;IACAC,oBADA;IAEAC,oBAFA;IAGAC,kBAHA;IAIAC,YAJA;IAKAC,cALA;IAMAC,0BANA;IAOAC,sBAPA;IAQAC,wBARA;IASAC,gBATA;IAUAC,oBAVA;IAWAC;EAXA,CADA;EAcAC;IACAC;MACAC,YADA;MAEAC;IAFA,CADA;IAKAC;MACAF,YADA;MAEAC;IAFA,CALA;IASAE;MACAH,WADA;MAEAC;IAFA;EATA,CAdA;EA4BAG,IA5BA,kBA4BA;IACA;MACAC,gBADA;MAEAC,aAFA;MAGAC,uBAHA;MAIAC,mBAJA;MAKAC,eALA;MAMAC,qBANA;MAOAC,aAPA;MAQAC;IARA;EAUA,CAvCA;EAwCAC,OAxCA,qBAwCA;IACA;IACA;EACA,CA3CA;EA4CAC,OA5CA,qBA4CA,EA5CA;EA6CAC,OA7CA,qBA6CA;IACA;IACA;IACAC;EACA,CAjDA;EAkDAC,SAlDA,uBAkDA,CACA;EACA,CApDA;EAqDAC;IACAf,OADA,mBACAgB,KADA,EACA;MAAA;;MACAC;QACA;;QACA;MACA,CAHA,EAGA,EAHA;IAIA,CANA;IAOAR,iBAPA,6BAOAO,KAPA,EAOA;MACA;QACAH;MACA;IACA;EAXA,CArDA;EAkEAK,YAlEA;EAmEAC;IACAC,YADA,0BACA;MAAA;;MACA;MACA;MACA;MACA;MACA;MACAC,6DAAAA,yBACAC,IADA,CACA;QACA;;QACA;UACAC,oEAAAA;YACAC,6BADA;YAEAC,wBAFA;YAGAC;UAHA;UAKAH,oEAAAA;UACAN;YACA;YACAU;UACA,CAHA,EAGA,GAHA,EAPA,CAWA;;UACA,2BACA;UACA;QACA;MACA,CAnBA,EAmBAL,IAnBA,CAmBA;QACA;MACA,CArBA,WAsBA;QACAM;QACA;MACA,CAzBA,aA0BA;QACAC;MACA,CA5BA;IA6BA,CApCA;IAqCAC,WArCA,uBAqCAC,QArCA,EAqCA;MACA;MACAC;QACA;;QACA;UACA;QACA;;QACA;;QACA;UACAD;QACA;;QACA;UACAA;QACA;MACA,CAZA;MAaAA;MACA;IACA,CAtDA;IAuDAE,kBAvDA,8BAuDAC,KAvDA,EAuDA;MAAA;;MACA;MACA;MACA,4CACAC,mDADA,yEACAC,oDADA;;MAEA;QACAC;MACA,CAFA,MAEA;QACAA;QACAA;QACAF;MACA;;MACA;IACA,CApEA;IAqEAG,aArEA,yBAqEAJ,KArEA,EAqEAK,WArEA,EAqEA;MACA;MACA;MACAL;;MACA;QACA;UACA;QACA;;QACAA;QACA;MACA;;MACAA;MACA;;MACA;QACA;MACA;;MACA;QACA;UAAA;QAAA;QACAM;MACA,CAHA,MAGA;QACA;UAAA;QAAA;;QACAA;MACA,CAHA,MAGA;QACA;UAAA;QAAA;;QACAA;MACA;;MACAH;IACA,CAhGA;IAiGAI,iBAjGA,+BAiGA;MAAA;;MACA;MACA;QACA;UACA;QACA;;QACA;UACA;QACA;;QACA;;QACA;UACAC;YACA;cACAC;YACA;UACA,CAJA;QAKA,CANA;;QAOA;UACA;QACA;;QACAC;UACAC,0BADA;UAEAF;QAFA;MAIA,CAtBA;MAuBA;IACA,CA3HA;IA4HAG,iBA5HA,+BA4HA;MAAA;;MACA;QACA;QAAA;QACA;QACAD;UACA;QACA,CAFA;MAGA,CANA;IAOA,CApIA;IAqIAE,YArIA,0BAqIA;MAAA;;MACA;QACA;QAAA;;QACA;MACA,CAHA;;MAIA;QACA;QACA;MACA;;MAAA;;MAEA;QACA;QACA;MACA;;MAEAnB;;MACA;QACA;MACA;IAEA,CAzJA;IA0JAoB,SA1JA,uBA0JA;MAAA;;MACA;QACA;QAAA;;QACA;;QACAH;QACAR;MACA,CALA;;MAMA;QACA;MACA;IACA,CApKA;IAqKAY,eArKA,2BAqKAC,KArKA,EAqKA;MACA;MACA;IACA,CAxKA;IAyKAC,eAzKA,2BAyKAC,KAzKA,EAyKA;MAAA;;MACA/B,2DAAAA;QAAAgC;MAAA,GACA/B,IADA,CACA;QACA;UACA;UACA;QACA;;QACA;MACA,CAPA,aAQA;QACA;UACA;QACA;MACA,CAZA;IAaA,CAvLA;IAwLAgC,cAxLA,4BAwLA;MACA;;MACA;QACA;MACA;IACA;EA7LA;AAnEA;;;;;;;;;;;;;;AC5D6F;AAC3B;AACL;;;AAG7D;AACA,CAA6F;AAC7F,gBAAgB,uGAAU;AAC1B,EAAE,oFAAM;AACR,EAAE,sFAAM;AACR,EAAE,+FAAe;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAI,KAAU,EAAE,YAiBf;AACD;AACA,+DAAe;;;;;;;;;;;;ACtC0L,CAAC,+DAAe,uMAAG,EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEA7N;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,0BAA0B;AACtC,KAAK;AACL;AACA;AACA;AACA;AACA,cAAc,gCAAgC;AAC9C;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA,iCAAiC;AACjC;AACA;AACA,8CAA8C;AAC9C;AACA,2CAA2C;AAC3C;AACA,4CAA4C;AAC5C;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,oCAAoC;AACzE;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA,+BAA+B;AAC/B,6BAA6B;AAC7B,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA,iCAAiC;AACjC,+BAA+B;AAC/B,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,6BAA6B;AAC7B,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA","sources":["webpack://electrolux/javascript/components/dynamicForm/DynamicFormVue.vue","webpack://electrolux/./javascript/components/dynamicForm/DynamicFormVue.vue","webpack://electrolux/./javascript/components/dynamicForm/DynamicFormVue.vue?f8fc","webpack://electrolux/./javascript/components/dynamicForm/DynamicFormVue.vue?7d2b","webpack://electrolux/./javascript/components/dynamicForm/DynamicFormVue.vue?87ca"],"sourcesContent":["<template>\r\n  <form class=\"c_form\" @submit=\"handleSubmit\" ref=\"dynamicForm\">\r\n    <div v-if=\"listrow\" v-for=\"formRow in listrow\" class=\"c_form__row row\">\r\n      <template v-for=\"formElement in formRow.listElement\">\r\n        <InputText v-if=\"inputTypes.find((i) => i == formElement.type)\" v-bind=\"formElement\" />\r\n        <Checkbox v-else-if=\"formElement.type == 'checkbox'\" v-bind=\"formElement\" />\r\n        <Radio v-else-if=\"formElement.type == 'radio'\" v-bind=\"formElement\" />\r\n        <Select v-else-if=\"formElement.type == 'select'\" v-bind=\"formElement\" />\r\n        <CountryPhone v-else-if=\"formElement.type == 'countryPhone'\" v-bind=\"formElement\" />\r\n        <DatePicker v-else-if=\"(formElement.type == 'datetime' || formElement.type === 'daterange') && isActiveComponent\" v-bind=\"formElement\" />\r\n        <InputHtml v-else-if=\"formElement.type == 'html'\" v-bind=\"formElement\" />\r\n        <InputHidden v-else-if=\"formElement.type == 'hidden'\" v-bind=\"formElement\" />\r\n        <Captcha\r\n          v-else-if=\"formElement.type == 'captcha' && formElement.defaultValue && isActiveComponent\"\r\n          ref=\"captcha\"\r\n          v-bind=\"formElement\"\r\n          :invalidcaptcha=\"invalidCaptcha\"\r\n          @emitTokenUser=\"handleTokenUser($event)\"\r\n          @expiredTokenUser=\"tokenUser = ''\"\r\n        />\r\n        <template v-else-if=\"formElement.type == 'button'\">\r\n          <div class=\"col-12 c_form__group c_form__error-message\" v-if=\"submiterror\">\r\n            {{ submiterror }}\r\n          </div>\r\n          <SubmitBtn @validateForm=\"validateForm()\" :submiterror=\"submitError\" :issubmitting=\"isSubmitting\" v-bind=\"formElement\" />\r\n        </template>\r\n        <ResetBtn v-else-if=\"formElement.type == 'reset'\"  @resetForm=\"resetForm()\" v-bind=\"formElement\" />\r\n      </template>\r\n    </div>\r\n  </form>\r\n</template>\r\n\r\n<script>\r\nimport EventEmitter from \"../../utilities/EventEmitter\";\r\nimport Template from '../howDoIFind/Template.vue';\r\nimport FormService from \"./FormService\";\r\n\r\nconst InputHtml = () => import(/* webpackChunkName: \"form\" */ \"./InputHtml\");\r\nconst InputText = () => import(/* webpackChunkName: \"form\" */ \"./InputText\");\r\nconst Checkbox = () => import(/* webpackChunkName: \"form\" */ \"./Checkbox\");\r\nconst Radio = () => import(/* webpackChunkName: \"form\" */ \"./Radio\");\r\nconst Select = () => import(/* webpackChunkName: \"form\" */ \"./Select\");\r\nconst CountryPhone = () => import(/* webpackChunkName: \"form\" */ \"./CountryPhone\");\r\nconst DatePicker = () => import(/* webpackChunkName: \"lazyform\" */ \"./DatePicker\");\r\nconst InputHidden = () => import(/* webpackChunkName: \"form\" */ \"./InputHidden\");\r\nconst Captcha = () => import(/* webpackChunkName: \"lazyform\" */ \"./Captcha\");\r\nconst SubmitBtn = () => import(/* webpackChunkName: \"form\" */ \"./SubmitBtn.vue\");\r\nconst ResetBtn = () => import(/* webpackChunkName: \"form\" */ \"./ResetBtn.vue\");\r\n\r\n// import InputHtml from \"./InputHtml\";\r\n// import InputText from \"./InputText\";\r\n// import Checkbox from \"./Checkbox\";\r\n// import Radio from \"./Radio\";\r\n// import Select from \"./Select\";\r\n// import CountryPhone from \"./CountryPhone\";\r\n// import DatePicker from \"./DatePicker\";\r\n// import InputHidden from \"./InputHidden\";\r\n// import Captcha from \"./Captcha.vue\";\r\n\r\nconst INPUT_TYPES = [\"text\", \"email\", \"tel\", \"number\"];\r\nexport default {\r\n  components: {\r\n    InputHtml,\r\n    InputText,\r\n    Checkbox,\r\n    Radio,\r\n    Select,\r\n    CountryPhone,\r\n    DatePicker,\r\n    InputHidden,\r\n    Captcha,\r\n    SubmitBtn,\r\n    ResetBtn\r\n  },\r\n  props: {\r\n    pageid: {\r\n      type: String,\r\n      defaults: \"\",\r\n    },\r\n    formapi: {\r\n      type: String,\r\n      defaults: \"\",\r\n    },\r\n    listrow: {\r\n      type: Array,\r\n      defaults: Array,\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      invalidInput: \"\",\r\n      listField: \"\",\r\n      inputTypes: INPUT_TYPES,\r\n      isSubmitting: false,\r\n      submitError: \"\",\r\n      invalidCaptcha: false,\r\n      tokenUser: \"\",\r\n      isActiveComponent: false,\r\n    };\r\n  },\r\n  updated() {\r\n    this.generateListField();\r\n    this.watchValidateForm();\r\n  },\r\n  created() {},\r\n  mounted() {\r\n    this.generateListField();\r\n    this.watchValidateForm();\r\n    window.addEventListener('scroll', this.scrollListener);\r\n  },\r\n  destroyed() {\r\n    // window.removeEventListener(\"scroll\", this.scrollListener);\r\n  },\r\n  watch: {\r\n    listrow(value) {\r\n      setTimeout(() => {\r\n        this.generateListField();\r\n        this.watchValidateForm();\r\n      }, 10);\r\n    },\r\n    isActiveComponent(value) {\r\n      if(value) {\r\n        window.removeEventListener(\"scroll\", this.scrollListener);\r\n      }\r\n    }\r\n  },\r\n  computed: {},\r\n  methods: {\r\n    handleSubmit() {\r\n      const { dynamicForm } = this.$refs;\r\n      const formData = this.convertData(Object.fromEntries(new FormData(dynamicForm).entries()));\r\n      this.submitError = '';\r\n      this.isSubmitting = true;\r\n      const self = this;\r\n      FormService.sendData(this.formapi, formData)\r\n        .then((data) => {\r\n          let resData = data;\r\n          if (resData && resData.success) {\r\n            EventEmitter.emit(\"registrations\", {\r\n              registrationProduct: formData,\r\n              registrationRes: resData,\r\n              loadForm: false,\r\n            });\r\n            EventEmitter.emit(\"activeStep\", 3);\r\n            setTimeout(function () {\r\n              //scroll top document\r\n              document.documentElement.scrollIntoView();\r\n            }, 100);\r\n            // dynamicForm.reset();\r\n            if(this.$refs.captcha) {\r\n              // this.$refs.captcha[0].resetCaptcha();\r\n            }\r\n          }\r\n        }).then((data) => {\r\n          this.$refs.captcha[0].resetCaptcha();\r\n        })\r\n        .catch((err) => {\r\n          console.log('innnnnn', err);\r\n          this.submitError = \"Can not submit this data!\";\r\n        })\r\n        .finally(() => {\r\n          self.isSubmitting = false;\r\n        });\r\n    },\r\n    convertData(formData) {\r\n      const { dynamicForm } = this.$refs;\r\n      Object.keys(formData).forEach((key) => {\r\n        const inputElement = dynamicForm.querySelector(`[name='${key}']`);\r\n        if (!inputElement) {\r\n          return;\r\n        }\r\n        const prefixValue = inputElement.getAttribute(\"data-prefix-value\");\r\n        if (prefixValue) {\r\n          formData[key] = prefixValue + formData[key];\r\n        }\r\n        if (inputElement.type == \"checkbox\" || inputElement.type == \"radio\") {\r\n          formData[key] = inputElement.checked ? 1 : 0;\r\n        }\r\n      });\r\n      formData.blockid = this.pageid;\r\n      return formData;\r\n    },\r\n    appendErrorElement(input) {\r\n      const inputParent = input.parentElement;\r\n      const groupElement = input.closest(\".js_form-group\");\r\n      let errorElement =\r\n        inputParent.querySelector(\".c_form__error-message\") ?? groupElement.querySelector(\".c_form__error-message\");\r\n      if (errorElement) {\r\n        errorElement.innerText = \"\";\r\n      } else {\r\n        errorElement = document.createElement(\"div\");\r\n        errorElement.classList.add(\"c_form__error-message\");\r\n        inputParent.append(errorElement);\r\n      }\r\n      return errorElement;\r\n    },\r\n    validateInput(input, validations) {\r\n      const validity = input.validity;\r\n      const errorElement = this.appendErrorElement(input);\r\n      input.setAttribute(\"data-has-validated\", 1);\r\n      if (validity.valid) {\r\n        if (this.invalidInput && this.invalidInput.isEqualNode(input)) {\r\n          this.invalidInput = \"\";\r\n        }\r\n        input.classList.remove(\"has-error\");\r\n        return;\r\n      }\r\n      input.classList.add(\"has-error\");\r\n      let errorMessage = \"This field is invalid\";\r\n      if (!this.invalidInput) {\r\n        this.invalidInput = input;\r\n      }\r\n      if (validity.valueMissing) {\r\n        const validOpt = validations.find((o) => o.type == \"required\");\r\n        errorMessage = validOpt ? validOpt.messageError : \"This field is required\";\r\n      } else if (validity.patternMismatch) {\r\n        const validOpt = validations.find((o) => o.type == \"pattern\");\r\n        errorMessage = validOpt ? validOpt.messageError : \"This field is invalid\";\r\n      } else if (validity.typeMismatch) {\r\n        const validOpt = validations.find((o) => o.type != \"required\" && o.type != \"pattern\");\r\n        errorMessage = validOpt ? validOpt.messageError : \"This field is not valid\";\r\n      }\r\n      errorElement.innerText = errorMessage;\r\n    },\r\n    generateListField() {\r\n      let res = [];\r\n      [].forEach.call(this.$refs.dynamicForm.querySelectorAll(\"[name]\"), (inputElement) => {\r\n        if (inputElement.tagName.toLowerCase() != \"input\" && inputElement.tagName.toLowerCase() != \"select\") {\r\n          return;\r\n        }\r\n        if (inputElement.getAttribute(\"type\") == \"hidden\") {\r\n          return;\r\n        }\r\n        let fieldData;\r\n        this.listrow.forEach((rowData) => {\r\n          rowData.listElement.forEach((item) => {\r\n            if (item.name == inputElement.getAttribute(\"name\")) {\r\n              fieldData = item;\r\n            }\r\n          });\r\n        });\r\n        if (!fieldData || !fieldData.validations || fieldData.validations.length === 0) {\r\n          return;\r\n        }\r\n        res.push({\r\n          inputElement,\r\n          fieldData,\r\n        });\r\n      });\r\n      this.listField = res;\r\n    },\r\n    watchValidateForm() {\r\n      this.listField.forEach((field) => {\r\n        const { inputElement, fieldData } = field;\r\n        const listenEvent = fieldData.type == \"datetime\" ? \"changeDatepicker\" : \"input\";\r\n        inputElement.addEventListener(listenEvent, () => {\r\n          this.validateInput(inputElement, fieldData.validations);\r\n        });\r\n      });\r\n    },\r\n    validateForm() {\r\n      this.listField.forEach((field) => {\r\n        const { inputElement, fieldData } = field;\r\n        this.validateInput(inputElement, fieldData.validations);\r\n      });\r\n      if (this.invalidInput) {\r\n        this.invalidInput.scrollIntoView();\r\n        this.invalidInput.focus();\r\n      };\r\n\r\n      if (this.$refs.captcha) {\r\n        this.validateCaptcha();\r\n        return;\r\n      }\r\n\r\n      console.log(this.invalidInput)\r\n      if (!this.invalidInput) {\r\n        this.handleSubmit();\r\n      }\r\n\r\n    },\r\n    resetForm() {\r\n      this.listField.forEach((field) => {\r\n        const { inputElement, fieldData } = field;\r\n        const errorElement = this.appendErrorElement(inputElement);\r\n        inputElement.classList.remove(\"has-error\");\r\n        errorElement.innerText ='';\r\n      });\r\n      if(this.$refs.captcha) {\r\n        this.$refs.captcha[0].resetCaptcha();\r\n      }\r\n    },\r\n    handleTokenUser(token) {\r\n      this.tokenUser = token;\r\n      this.invalidCaptcha = false;\r\n    },\r\n    validateCaptcha(event) {\r\n      FormService.getKey({ Response: this.tokenUser })\r\n        .then((res) => {\r\n          if (this.$refs.captcha[0].checkStatusCatpcha() && !res.Success) {\r\n            // this.$refs.captcha[0].resetCaptcha();\r\n            return;\r\n          }\r\n          this.invalidCaptcha = !res.Success;\r\n        })\r\n        .finally((res) => {\r\n          if (!this.invalidCaptcha && !this.invalidInput) {\r\n            this.handleSubmit();\r\n          }\r\n        });\r\n    },\r\n    scrollListener() {\r\n      let posScroll = window.scrollY;\r\n      if(posScroll > 300 && this.isActiveComponent == false) {\r\n        this.isActiveComponent = true;\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n","import { render, staticRenderFns } from \"./DynamicFormVue.vue?vue&type=template&id=18a40af4&\"\nimport script from \"./DynamicFormVue.vue?vue&type=script&lang=js&\"\nexport * from \"./DynamicFormVue.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"D:\\\\Electrolux\\\\ProductRegistration\\\\node_modules\\\\vue-hot-reload-api\\\\dist\\\\index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('18a40af4')) {\n      api.createRecord('18a40af4', component.options)\n    } else {\n      api.reload('18a40af4', component.options)\n    }\n    module.hot.accept(\"./DynamicFormVue.vue?vue&type=template&id=18a40af4&\", function () {\n      api.rerender('18a40af4', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"javascript/components/dynamicForm/DynamicFormVue.vue\"\nexport default component.exports","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./DynamicFormVue.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./DynamicFormVue.vue?vue&type=script&lang=js&\"","export * from \"-!../../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./DynamicFormVue.vue?vue&type=template&id=18a40af4&\"","var render = function () {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"form\",\n    {\n      ref: \"dynamicForm\",\n      staticClass: \"c_form\",\n      on: { submit: _vm.handleSubmit },\n    },\n    _vm._l(_vm.listrow, function (formRow) {\n      return _vm.listrow\n        ? _c(\n            \"div\",\n            { staticClass: \"c_form__row row\" },\n            [\n              _vm._l(formRow.listElement, function (formElement) {\n                return [\n                  _vm.inputTypes.find(function (i) {\n                    return i == formElement.type\n                  })\n                    ? _c(\n                        \"InputText\",\n                        _vm._b({}, \"InputText\", formElement, false)\n                      )\n                    : formElement.type == \"checkbox\"\n                    ? _c(\"Checkbox\", _vm._b({}, \"Checkbox\", formElement, false))\n                    : formElement.type == \"radio\"\n                    ? _c(\"Radio\", _vm._b({}, \"Radio\", formElement, false))\n                    : formElement.type == \"select\"\n                    ? _c(\"Select\", _vm._b({}, \"Select\", formElement, false))\n                    : formElement.type == \"countryPhone\"\n                    ? _c(\n                        \"CountryPhone\",\n                        _vm._b({}, \"CountryPhone\", formElement, false)\n                      )\n                    : (formElement.type == \"datetime\" ||\n                        formElement.type === \"daterange\") &&\n                      _vm.isActiveComponent\n                    ? _c(\n                        \"DatePicker\",\n                        _vm._b({}, \"DatePicker\", formElement, false)\n                      )\n                    : formElement.type == \"html\"\n                    ? _c(\n                        \"InputHtml\",\n                        _vm._b({}, \"InputHtml\", formElement, false)\n                      )\n                    : formElement.type == \"hidden\"\n                    ? _c(\n                        \"InputHidden\",\n                        _vm._b({}, \"InputHidden\", formElement, false)\n                      )\n                    : formElement.type == \"captcha\" &&\n                      formElement.defaultValue &&\n                      _vm.isActiveComponent\n                    ? _c(\n                        \"Captcha\",\n                        _vm._b(\n                          {\n                            ref: \"captcha\",\n                            refInFor: true,\n                            attrs: { invalidcaptcha: _vm.invalidCaptcha },\n                            on: {\n                              emitTokenUser: function ($event) {\n                                return _vm.handleTokenUser($event)\n                              },\n                              expiredTokenUser: function ($event) {\n                                _vm.tokenUser = \"\"\n                              },\n                            },\n                          },\n                          \"Captcha\",\n                          formElement,\n                          false\n                        )\n                      )\n                    : formElement.type == \"button\"\n                    ? [\n                        _vm.submiterror\n                          ? _c(\n                              \"div\",\n                              {\n                                staticClass:\n                                  \"col-12 c_form__group c_form__error-message\",\n                              },\n                              [\n                                _vm._v(\n                                  \"\\n          \" +\n                                    _vm._s(_vm.submiterror) +\n                                    \"\\n        \"\n                                ),\n                              ]\n                            )\n                          : _vm._e(),\n                        _vm._v(\" \"),\n                        _c(\n                          \"SubmitBtn\",\n                          _vm._b(\n                            {\n                              attrs: {\n                                submiterror: _vm.submitError,\n                                issubmitting: _vm.isSubmitting,\n                              },\n                              on: {\n                                validateForm: function ($event) {\n                                  return _vm.validateForm()\n                                },\n                              },\n                            },\n                            \"SubmitBtn\",\n                            formElement,\n                            false\n                          )\n                        ),\n                      ]\n                    : formElement.type == \"reset\"\n                    ? _c(\n                        \"ResetBtn\",\n                        _vm._b(\n                          {\n                            on: {\n                              resetForm: function ($event) {\n                                return _vm.resetForm()\n                              },\n                            },\n                          },\n                          \"ResetBtn\",\n                          formElement,\n                          false\n                        )\n                      )\n                    : _vm._e(),\n                ]\n              }),\n            ],\n            2\n          )\n        : _vm._e()\n    }),\n    0\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }"],"names":["components","InputHtml","InputText","Checkbox","Radio","Select","CountryPhone","DatePicker","InputHidden","Captcha","SubmitBtn","ResetBtn","props","pageid","type","defaults","formapi","listrow","data","invalidInput","listField","inputTypes","isSubmitting","submitError","invalidCaptcha","tokenUser","isActiveComponent","updated","created","mounted","window","destroyed","watch","value","setTimeout","computed","methods","handleSubmit","FormService","then","EventEmitter","registrationProduct","registrationRes","loadForm","document","console","self","convertData","formData","Object","appendErrorElement","input","inputParent","groupElement","errorElement","validateInput","validations","errorMessage","generateListField","rowData","fieldData","res","inputElement","watchValidateForm","validateForm","resetForm","handleTokenUser","token","validateCaptcha","event","Response","scrollListener"],"sourceRoot":""}